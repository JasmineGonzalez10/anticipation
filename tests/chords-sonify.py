from argparse import ArgumentParser
from pathlib import Path

from anticipation import ops
from anticipation.vocab import AUTOREGRESS, ANTICIPATE
from anticipation.convert import *
from anticipation.chords import *
from mido import MidiFile

if __name__ == '__main__':
    parser = ArgumentParser(description='auditory check for midi file chords')
    parser.add_argument('filename',
        help='MIDI file to check chords for')
    args = parser.parse_args()

    chord_tokens = [0, 200, 0, 200, 200, 0, 400, 200, 0, 600, 200, 24, 800, 200, 24, 1000, 200, 132, 1200, 100, 132, 1300, 100, 24, 1400, 200, 24, 1600, 200, 24, 1800, 200, 24, 2000, 150, 5, 2150, 100, 10, 2250, 150, 111, 2400, 150, 24, 2550, 150, 5, 2700, 100, 10, 2800, 200, 111, 3000, 150, 24, 3150, 150, 5, 3300, 100, 24, 3400, 150, 5, 3550, 150, 24, 3700, 100, 5, 3800, 50, 5, 3850, 150, 10, 4000, 150, 3, 4150, 150, 24, 4300, 100, 5, 4400, 150, 10, 4550, 150, 3, 4700, 100, 24, 4800, 50, 24, 4850, 150, 5, 5000, 150, 19, 5150, 100, 3, 5250, 150, 10, 5400, 150, 5, 5550, 250, 19, 5800, 200, 10, 6000, 150, 5, 6150, 250, 19, 6400, 150, 10, 6550, 150, 14, 6700, 100, 19, 6800, 200, 3, 7000, 100, 94, 7100, 100, 5, 7200, 200, 219, 7400, 150, 5, 7550, 150, 24, 7700, 100, 5, 7800, 200, 10, 8000, 150, 3, 8150, 100, 24, 8250, 150, 5, 8400, 150, 10, 8550, 150, 3, 8700, 100, 24, 8800, 200, 5, 9000, 150, 19, 9150, 100, 3, 9250, 150, 10, 9400, 150, 5, 9550, 250, 19, 9800, 150, 10, 9950, 150, 5, 10100, 100, 19, 10200, 200, 19, 10400, 150, 10, 10550, 150, 14, 10700, 100, 19, 10800, 150, 3, 10950, 150, 250, 11100, 100, 5, 11200, 200, 65, 11400, 150, 5, 11550, 250, 14, 11800, 200, 8, 12000, 200, 50, 12200, 200, 14, 12400, 200, 8, 12600, 100, 8, 12700, 100, 24, 12800, 150, 24, 12950, 250, 5, 13200, 200, 5, 13400, 200, 60, 13600, 200, 53, 13800, 150, 24, 13950, 150, 5, 14100, 100, 10, 14200, 200, 111, 14400, 150, 24, 14550, 150, 5, 14700, 100, 10, 14800, 150, 111, 14950, 150, 24, 15100, 100, 5, 15200, 50, 5, 15250, 150, 24, 15400, 150, 5, 15550, 150, 24, 15700, 100, 5, 15800, 150, 10, 15950, 150, 3, 16100, 100, 24, 16200, 200, 5, 16400, 100, 10, 16500, 100, 3, 16600, 50, 111, 16650, 150, 24, 16800, 150, 5, 16950, 150, 19, 17100, 100, 3, 17200, 200, 10, 17400, 100, 5, 17500, 100, 19, 17600, 200, 19, 17800, 150, 10, 17950, 150, 5, 18100, 100, 19, 18200, 200, 19, 18400, 150, 10, 18550, 100, 14, 18650, 150, 3, 18800, 150, 3, 18950, 150, 250, 19100, 100, 5, 19200, 200, 319, 19400, 150, 226, 19550, 100, 10, 19650, 150, 5, 19800, 200, 19, 20000, 100, 19, 20100, 100, 10, 20200, 200, 122, 20400, 200, 19, 20600, 200, 250, 20800, 150, 5, 20950, 250, 226, 21200, 150, 10, 21350, 150, 5, 21500, 100, 19, 21600, 200, 19, 21800, 150, 10, 21950, 150, 122, 22100, 100, 19, 22200, 200, 19]
    chord_tokens = chordify(chord_tokens)
    orig_midi = MidiFile(args.filename)
    tokens = midi_to_events(orig_midi)
    tokens = tokens + chord_tokens
    mid = events_to_midi(tokens)
    #mid = events_to_midi(chord_tokens)
    mid.save(f'output/{Path(args.filename).stem}.mid')
    print(f' Tokenized MIDI Length: {mid.length} seconds ({len(tokens)} tokens)')
